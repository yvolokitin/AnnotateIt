import 'dart:io';
import 'dart:ui' as ui;
import 'package:flutter/material.dart';
import 'package:google_ml_kit/google_ml_kit.dart' as ml_kit;
import 'package:logging/logging.dart';

import '../models/annotation.dart';
import '../models/label.dart';

/// A service that uses Google ML Kit to label images
class MLKitImageLabelingService {
  static final _logger = Logger('MLKitImageLabelingService');
  static final MLKitImageLabelingService _instance = MLKitImageLabelingService._internal();
  
  factory MLKitImageLabelingService() {
    return _instance;
  }
  
  MLKitImageLabelingService._internal();
  
  /// The image labeler instance from ML Kit
  late final ml_kit.ImageLabeler _imageLabeler;
  
  /// Initialize the image labeler with the given confidence threshold
  void initialize({double confidenceThreshold = 0.5}) {
    final options = ml_kit.ImageLabelerOptions(confidenceThreshold: confidenceThreshold);
    _imageLabeler = ml_kit.ImageLabeler(options: options);
    _logger.info('ML Kit Image Labeler initialized with confidence threshold: $confidenceThreshold');
  }
  
  /// Process an image file and return a list of labels with confidence scores
  Future<List<ml_kit.ImageLabel>> processImageFile(File imageFile) async {
    try {
      final inputImage = ml_kit.InputImage.fromFile(imageFile);
      final labels = await _imageLabeler.processImage(inputImage);
      _logger.info('Processed image file: ${imageFile.path}, found ${labels.length} labels');
      return labels;
    } catch (e) {
      _logger.severe('Error processing image file: ${imageFile.path}', e);
      rethrow;
    }
  }
  
  /// Process an image and return a list of labels with confidence scores
  Future<List<ml_kit.ImageLabel>> processImage(ui.Image image) async {
    try {
      // Convert ui.Image to InputImage
      // This is a simplified approach - in a real app, you might need to convert the ui.Image to a file or bytes
      final inputImage = await _convertUiImageToInputImage(image);
      final labels = await _imageLabeler.processImage(inputImage);
      _logger.info('Processed image, found ${labels.length} labels');
      return labels;
    } catch (e) {
      _logger.severe('Error processing image', e);
      rethrow;
    }
  }
  
  /// Convert a ui.Image to an InputImage
  /// This is a simplified approach - in a real app, you might need to convert the ui.Image to a file or bytes
  Future<ml_kit.InputImage> _convertUiImageToInputImage(ui.Image image) async {
    // This is a placeholder implementation
    // In a real app, you would need to convert the ui.Image to a format that ML Kit can process
    // For example, you might need to convert it to a File or Uint8List
    
    // For demonstration purposes, we'll create a temporary file from the image
    final byteData = await image.toByteData(format: ui.ImageByteFormat.png);
    final buffer = byteData!.buffer.asUint8List();
    
    final tempDir = await Directory.systemTemp.createTemp('ml_kit_temp');
    final tempFile = File('${tempDir.path}/temp_image.png');
    await tempFile.writeAsBytes(buffer);
    
    return ml_kit.InputImage.fromFile(tempFile);
  }
  
  /// Convert ML Kit image labels to annotations
  List<Annotation> convertLabelsToAnnotations({
    required List<ml_kit.ImageLabel> labels,
    required int mediaItemId,
    required List<Label> projectLabels,
    required int annotatorId,
  }) {
    final annotations = <Annotation>[];
    final now = DateTime.now();
    
    for (final imageLabel in labels) {
      // Try to find a matching project label by name
      final matchingLabels = projectLabels.where(
        (label) => label.name.toLowerCase() == imageLabel.label.toLowerCase()
      ).toList();
      
      // If no matching label is found, skip this image label
      if (matchingLabels.isEmpty) continue;
      
      final matchingLabel = matchingLabels.first;
      
      final annotation = Annotation(
        mediaItemId: mediaItemId,
        labelId: matchingLabel.id,
        annotationType: 'classification',
        data: {'label': imageLabel.label},
        confidence: imageLabel.confidence,
        annotatorId: annotatorId,
        comment: 'Generated by Google ML Kit',
        status: 'auto_generated',
        createdAt: now,
        updatedAt: now,
      );
      
      annotations.add(annotation);
    }
    
    return annotations;
  }
  
  /// Close the image labeler when it's no longer needed
  void close() {
    _imageLabeler.close();
    _logger.info('ML Kit Image Labeler closed');
  }
}